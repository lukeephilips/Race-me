<div class=" row map-container">
  <div class="col s8" id="map">
  </div>
  </div>
</div>


<script>
function initMap() {
  var directionsService = new google.maps.DirectionsService;
  var directionsDisplay = new google.maps.DirectionsRenderer;
  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 7
  });

  calculateAndDisplayRoute(directionsService, directionsDisplay);
  directionsDisplay.setMap(map);
  directionsDisplay.setPanel(document.getElementById('directions'));
}
function calculateAndDisplayRoute(directionsService, directionsDisplay) {
  directionsService.route({
    origin: '<%= @user_origin %>',
    destination: '<%= @user_destination %>',
    travelMode: 'WALKING'

  }, function(response, status) {
    if (status === 'OK') {

      directionsDisplay.setDirections(response);

      turnByTurnData = createDistanceArray(response);
      setMarker(turnByTurnData);

    } else {
         window.alert('Directions request failed due to ' + status);
    }
  });
}

function createDistanceArray(response){
  var turnByturnDistances = [];
  var distanceFromOrigin = 0;
  response.routes[0].legs[0].steps.map(function(step){
    distanceFromOrigin += step.distance.value;
    turnByturnDistances.push({
      "dist": step.distance.value,
      "lat_lng": {lat: step.lat_lngs[0].lat(), lng: step.lat_lngs[0].lng()},
      "total_dist": distanceFromOrigin});
  })
  return turnByturnDistances
}

function setMarker(turnByTurnData){

  // var userProgress = <%= @user.races.where(goal_id: @goal.id).first.progress %>;
  // var nearestPoint = setNearestPoint(userProgress);

  var usersProgressArray = <%= @users_races_hash.to_json.html_safe %>;
  var nearestPointsArray = usersProgressArray.map(setNearestPoint);

  nearestPointsArray.forEach(function mapify(nearestPoint) {
    var marker = new google.maps.Marker({
      position: nearestPoint[0],
      map: map,
      title: nearestPoint[1]
    });
  })
}
// function findPoint(step){
//   debugger
//   userProgress = <%= @user.races.where(goal_id: @goal.id).first.progress %>;
//
//   return step.total_dist >= userProgress
// }

function setNearestPoint(userProgress){
  if (userProgress[0] >= _.last(turnByTurnData)['total_dist']){
    var nearestPoint = _.last(turnByTurnData)['lat_lng']
  }
  else {
    var nearestPoint = turnByTurnData.find(function findPoint(step){
      var progressAtStep = userProgress[0];

      return step.total_dist >= progressAtStep
    }).lat_lng;
  }
  return [nearestPoint, userProgress[1]];
};
</script>
